<p>The very first algorithm that we saw for searching was the "walking"
approach: we "walk" through the list until we find the number that we
want. What kind of runtime would this algorithm have, in the
worst-case: would it be constant, linear, or neither? This question may
help: if you were having a particularly bad day and the number you
wanted was always at the end of the list, how long would it take to
find the number if, say, the list was 20 elements long? 200 elements
long? 2000 elements long?</p>
<multiplechoiceresponse>
<choicegroup type="MultipleChoice">
<choice correct="false">Constant Time</choice>
<choice correct="true">Linear Time</choice>
<choice correct="false">Neither</choice>
</choicegroup>
</multiplechoiceresponse>
<solution>
<div class="detailed-solution">
<p>Explanation</p>
<p>Exactly! The time it takes to search a list scales as the size of the
list. This is because the more the numbers in a list, the more the
numbers you will have to look at in order to find the number you are
interested in.</p>
</div>
</solution>
